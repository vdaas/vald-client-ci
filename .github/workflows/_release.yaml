#
# Copyright (C) 2019-2024 vdaas.org vald team <vald@vdaas.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
name: "Run release"
on:
  workflow_call:
    inputs:
      client_type:
        type: "string"
        description: "Set client type. e.g) go, python, node, java"
        required: false

jobs:
  release:
    if: startsWith( github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Create release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  publish-pypl:
    if: ${{ startsWith( github.ref, 'refs/tags/') && inputs.client_type == 'python'}}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Install dependencies
        run: |
          make ci/deps/install
      - name: Prepare for publish
        run: |
          make ci/package/prepare
      # - name: Publish
      #   uses: pypa/gh-action-pypi-publish@master
      #   with:
      #     user: ${{ secrets.PIP_USERNAME }}
      #     password: ${{ secrets.PIP_TOKEN }}

      # NOTE: The following are previous steps for publish.
      # - name: prepare to publish
      #   run: |
      #     python3 setup.py sdist
      #     python3 setup.py bdist_wheel
      # - name: publish
      #   uses: pypa/gh-action-pypi-publish@master
      #   with:
      #     user: ${{ secrets.PIP_USERNAME }}
      #     password: ${{ secrets.PIP_TOKEN }}

  publish-npm:
    if: ${{ startsWith( github.ref, 'refs/tags/') && inputs.client_type == 'node'}}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
      - uses: ./.github/actions/setup-language
        with:
          client_type: ${{ inputs.client_type }}
      # - name: Publish
      #   run: |
      #     make ci/package/publish
      #   env:
      #     NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

      # NOTE: The following are previous steps for publish.
      # - name: Build
      #   run: |
      #     make npm/deps
      #     export GOPATH=$HOME/go
      #     make all
      #     make vald/sha/update
      #     make vald/client/node/version/update
      #     rm -rf vald
      # - name: publish
      #   run: |
      #     npm install
      #     npm publish
      #   env:
      #     NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  publish-maven:
    if: ${{ startsWith( github.ref, 'refs/tags/') && inputs.client_type == 'java'}}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Prepare for publish
        run: |
          make ci/package/prepare
      # - name: Publish
      #   run: |
      #     make ci/package/publish

      # NOTE: The following are previous steps for publish.
      # - name: Prepare for publish
      #   run: |
      #     ./gradlew clean
      #     echo "${PGP_PRIVATE_KEY}" > private_key.txt
      #     gpg --import --batch private_key.txt
      #     rm -f private_key.txt
      #     gpg --pinentry-mode loopback --passphrase "${GPG_PASSPHRASE}" --export-secret-keys -o ~/.gnupg/secring.gpg
      #     cat << EOF > ~/.gradle/gradle.properties
      #     org.gradle.daemon=true
      #     signing.keyId=${GPG_KEYID}
      #     signing.password=${GPG_PASSPHRASE}
      #     signing.secretKeyRingFile=${HOME}/.gnupg/secring.gpg
      #     sonatypeUsername=${SONATYPE_USERNAME}
      #     sonatypePassword=${SONATYPE_PASSWORD}
      #     nexusUsername=${SONATYPE_USERNAME}
      #     nexusPassword=${SONATYPE_PASSWORD}
      #     EOF
      #   env:
      #     GPG_KEYID: ${{ secrets.GPG_KEYID }}
      #     GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      #     PGP_PRIVATE_KEY: ${{ secrets.PGP_PRIVATE_KEY }}
      #     SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
      #     SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
      # - name: Publish
      #   run: |
      #     ./gradlew clean
      #     make vald
      #     ./gradlew build -x test --stacktrace
      #     ./gradlew publish -Prelease --stacktrace
      #     sleep 120
      #     ./gradlew closeAndReleaseRepository --stacktrace
      #   env:
      #     SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
      #     SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
